from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet
import secrets 
import string
import base64
import os


def generate_unicode_password(length):
    # Define the characters to use in the password
    characters = string.ascii_letters + string.digits + string.punctuation
    # Add some Unicode characters
    unicode_characters = ''.join(chr(i) for i in range(0x0021, 0x007E))  # Latin-1 Supplement
    characters += unicode_characters
    
    # Generate the password
    password = ''.join(secrets.choice(characters) for i in range(length))
    return password

password_length = 12
# Get password from user
user_input = input("Do you want to auto generated Password? Yes(Y) or No(N): ")
if user_input == "Yes" or user_input == "Y" or user_input == "y":
    password = generate_unicode_password(password_length).encode("utf-8")
    print("Password is : "+str(password)+" Please note down.")
else:
    password = input("Enter a password: ").encode()

# Generate a salt
salt = os.urandom(16)

# Derive a key from the password
kdf = PBKDF2HMAC(
    algorithm=hashes.SHA256(),
    length=32,
    salt=salt,
    iterations=100000,
    backend=default_backend()
)
key = base64.urlsafe_b64encode(kdf.derive(password))
cipher_suite = Fernet(key)

# Save the salt and key to a file
with open('test/key.key', 'wb') as key_file:
    key_file.write(salt + key)

# Read the file to encrypt
with open('test/test.mp3', 'rb') as file:
    file_data = file.read()

# Encrypt the file data
encrypted_data = cipher_suite.encrypt(file_data)

# Write the encrypted data to a new file
with open('test/encrypted_file.txt', 'wb') as file:
    file.write(encrypted_data)
